add
MVI C. 00
LDA 4150
MOV B. A
LDA 4151
ADD B
JNC LOOP
INRC
LOOP: STA 4152
MOV A, C:
STA 4153
HLT


sub
MVI C. 00H
LDA 8001H
MOV B. A
LDA 8000H
SUB B
JNC LOOP
CMA
INR A
INR C
LOOP: STA 8009H
MOV A. C
STA 8009H
HLT


1's and 2's
MVI C, 00H
LDA 8000H
CMA
STA 8003H
ADI 1
STA 8004H
HLT


sum of 5 num loop
LDA 8000H
MOV B. A
INR A
MOV C, A
MVI A. 09H
LOOP1: AND B
DCR C
JNZ LOOP1
MVI C, 02H
MVI B, 00H
LOOP2: INR B
SUB C
JNZ LOOP2
MOV A. B
STA 8008H
HIT


small num from array
LXi H,5000
MOV B.M
INXH
MOV A.M
DCR B
LOOP: INX H
CMP M
JC AHEAD
MOV A.M
AHEAD: DCR B
JNZ LOOP
STA 6000
HLT


arrange the num in assending
LXI H,5000
MOV C.M
DER C
REPEAT: MOV D,C
LXIH.5001
LOOP: MOV A,M
INX H
CMP M
JC SKIP
MOV B.M
MOV M.A
DEX H
MOV M.B
INX H
SKIP: DCR D
INZ LOOP
DOR C
JNZ REPEAT
HLT


factorial
MVI B. 03H
MOV C. B
DCR C
LOOPI:
MOV E. C
SUB A
LOOP2:
ADD B
DCR E
JNZ LOOP2
MOV B. A
DCR C
JNZ LOOPI
STA 8000H


B to D
 #include<stdio.h>
int main(int argc, char const *argv[])
{
    int binary; 
    printf("Enter num\n");
    scanf("%d",&binary);

    int weight = 1, rem, decimal = 0;
    while (binary!=0)
    {
        rem = binary % 10;
        decimal = decimal + rem * weight;
        binary = binary /10;
        weight = weight * 2;
    }
    
    printf("%d",decimal);
    return 0;
}


D to b
 #include<stdio.h>
int main(int argc, char const *argv[])
{
   int decimal, i =0;
   printf("Enter the decimal\n");
    scanf("%d", &decimal);

    int binary[i];
    while (decimal>0)
    {
        binary[i] = decimal % 2;
        decimal = decimal /2;
        i++;
    }
    
    for (int j = i-1; j >= 0; j--){
        printf("%d",binary[j]);
    }
    
    return 0;
}


D to h
#include<stdio.h>
int main(int argc, char const *argv[])
{
    int decimal;
    printf("Enter the decimal\n");
    scanf("%d", &decimal);

    char hexa[15];
    int i = 0,rem;
    while (decimal!=0)
    {
        rem = decimal % 16;
        if (rem>9)
        {
            hexa[i] = (char)(rem+55);
        }
        else{
            hexa[i] = (char)(rem+48);
        }
        decimal = decimal /16;
        i++;
        
    }
    
    for (int j = i-1; j >= 0; j--){
        printf("%d",hexa[j]);
    }
    return 0;
}


1's
 #include<stdio.h>
int main(int argc, char const *argv[])
{
   char binary[15],k;
    printf("Enter the size of binary\n");
    scanf("%d", &k);
    printf("Enter the binary\n");
    for (int i = 0; i < k; i++)
    {
        scanf("%d", &binary[i]);
    }
    
    

    for (int j = 0; j < k; j++)
    {
        if (binary[j] == 1)
        {
            binary[j] = 0;
        }
        else if (binary[j] == 0)
        {
            binary[j] = 1;
        } 
        
    }
    
    for (int l = 0; l < k; l++)
    {
        printf("%d",binary[l]);
    }
    return 0;
}


2's
#include <stdio.h>  
int main()  
{  
   int n;   
   printf("Enter the number of bits do you want to enter :");  
   scanf("%d",&n);  
   char binary[n+1];  
   char onescomplement[n+1]; 
   char twoscomplement[n+1];  
   int carry=1; 
   printf("\nEnter the binary number : ");  
   scanf("%s", binary);  
   printf("%s", binary);  
   printf("\nThe ones complement of the binary number is :");  
     
   
   for(int i=0;i<n;i++)  
   {  
       if(binary[i]=='0')  
       onescomplement[i]='1';  
       else if(binary[i]=='1')  
       onescomplement[i]='0';  
   }  
   onescomplement[n]='\0';  
   printf("%s",onescomplement);  
    
  
printf("\nThe twos complement of a binary number is : ");  
  

for(int i=n-1; i>=0; i--)  
    {  
        if(onescomplement[i] == '1' && carry == 1)  
        {  
            twoscomplement[i] = '0';  
        }  
        else if(onescomplement[i] == '0' && carry == 1)  
        {  
            twoscomplement[i] = '1';  
            carry = 0;  
        }  
        else  
        {  
            twoscomplement[i] = onescomplement[i];  
        }  
    }  
twoscomplement[n]='\0';  
printf("%s",twoscomplement);  
return 0;  
}



cls
#include<stdio.h>
int main(int argc, char const *argv[])
{
    int decimal, x=0,y = 0;
    printf("enter the decimal");
    scanf("%d",&decimal);
   x = (decimal>>1);
   y = (decimal<<1);
   printf("%d\n",x);
   printf("%d\n",y);
   
    return 0;
}
